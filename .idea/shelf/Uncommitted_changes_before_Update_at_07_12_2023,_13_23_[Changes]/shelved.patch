Index: backend/src/main/java/dev.trip.tutorreportbackend/application/controllers/ReportController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.trip.tutorreportbackend.application.controllers;\n\nimport dev.trip.tutorreportbackend.application.models.dto.ReportRequest;\nimport dev.trip.tutorreportbackend.application.models.dto.ReportResponse;\nimport dev.trip.tutorreportbackend.application.services.ReportService;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.time.LocalDate;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/reports\")\n@CrossOrigin(value = \"http://localhost:3000\")\npublic class ReportController {\n\n    private final ReportService reportService;\n\n    public ReportController(ReportService reportService) {\n        this.reportService = reportService;\n    }\n\n\n    @GetMapping(\"/get/{email}\")\n    public List<ReportResponse> getAllReportsForTutor(@PathVariable String email){\n        System.out.println(\"email: \" + email);\n        return reportService.getAllReportsFromTutor(email);\n    }\n\n    @GetMapping(\"/\")\n    public List<ReportResponse> getAllReports(){\n        return reportService.getReports();\n    }\n\n    @PostMapping(\"/add/{email}\")\n    public List<ReportResponse> addReport(@PathVariable String email, @RequestBody ReportRequest reportRequest){\n        System.out.println(email);\n        System.out.println(reportRequest);\n        reportService.addReport(email, reportRequest);\n        return reportService.getAllReportsFromDate(LocalDate.now().minusDays(14));\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/dev.trip.tutorreportbackend/application/controllers/ReportController.java b/backend/src/main/java/dev.trip.tutorreportbackend/application/controllers/ReportController.java
--- a/backend/src/main/java/dev.trip.tutorreportbackend/application/controllers/ReportController.java	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
+++ b/backend/src/main/java/dev.trip.tutorreportbackend/application/controllers/ReportController.java	(date 1701949869236)
@@ -10,7 +10,7 @@
 
 @RestController
 @RequestMapping("/reports")
-@CrossOrigin(value = "http://localhost:3000")
+@CrossOrigin
 public class ReportController {
 
     private final ReportService reportService;
Index: frontend/src/index.css
===================================================================
diff --git a/frontend/src/index.css b/frontend/src/index.css
deleted file mode 100644
--- a/frontend/src/index.css	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
+++ /dev/null	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
@@ -1,13 +0,0 @@
-body {
-  margin: 0;
-  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
-    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
-    sans-serif;
-  -webkit-font-smoothing: antialiased;
-  -moz-osx-font-smoothing: grayscale;
-}
-
-code {
-  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
-    monospace;
-}
Index: frontend/public/robots.txt
===================================================================
diff --git a/frontend/public/robots.txt b/frontend/public/robots.txt
deleted file mode 100644
--- a/frontend/public/robots.txt	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
+++ /dev/null	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
@@ -1,3 +0,0 @@
-# https://www.robotstxt.org/robotstxt.html
-User-agent: *
-Disallow:
Index: frontend/src/setupTests.ts
===================================================================
diff --git a/frontend/src/setupTests.ts b/frontend/src/setupTests.ts
deleted file mode 100644
--- a/frontend/src/setupTests.ts	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
+++ /dev/null	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
@@ -1,5 +0,0 @@
-// jest-dom adds custom jest matchers for asserting on DOM nodes.
-// allows you to do things like:
-// expect(element).toHaveTextContent(/react/i)
-// learn more: https://github.com/testing-library/jest-dom
-import '@testing-library/jest-dom/extend-expect';
Index: frontend/src/logo.svg
===================================================================
diff --git a/frontend/src/logo.svg b/frontend/src/logo.svg
deleted file mode 100644
--- a/frontend/src/logo.svg	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
+++ /dev/null	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
@@ -1,7 +0,0 @@
-<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3">
-    <g fill="#61DAFB">
-        <path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/>
-        <circle cx="420.9" cy="296.5" r="45.7"/>
-        <path d="M520.5 78.1z"/>
-    </g>
-</svg>
Index: frontend/src/react-app-env.d.ts
===================================================================
diff --git a/frontend/src/react-app-env.d.ts b/frontend/src/react-app-env.d.ts
deleted file mode 100644
--- a/frontend/src/react-app-env.d.ts	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
+++ /dev/null	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
@@ -1,1 +0,0 @@
-/// <reference types="react-scripts" />
Index: frontend/src/serviceWorker.ts
===================================================================
diff --git a/frontend/src/serviceWorker.ts b/frontend/src/serviceWorker.ts
deleted file mode 100644
--- a/frontend/src/serviceWorker.ts	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
+++ /dev/null	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
@@ -1,149 +0,0 @@
-// This optional code is used to register a service worker.
-// register() is not called by default.
-
-// This lets the app load faster on subsequent visits in production, and gives
-// it offline capabilities. However, it also means that developers (and users)
-// will only see deployed updates on subsequent visits to a page, after all the
-// existing tabs open on the page have been closed, since previously cached
-// resources are updated in the background.
-
-// To learn more about the benefits of this model and instructions on how to
-// opt-in, read https://bit.ly/CRA-PWA
-
-const isLocalhost = Boolean(
-  window.location.hostname === 'localhost' ||
-    // [::1] is the IPv6 localhost address.
-    window.location.hostname === '[::1]' ||
-    // 127.0.0.0/8 are considered localhost for IPv4.
-    window.location.hostname.match(
-      /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/
-    )
-);
-
-type Config = {
-  onSuccess?: (registration: ServiceWorkerRegistration) => void;
-  onUpdate?: (registration: ServiceWorkerRegistration) => void;
-};
-
-export function register(config?: Config) {
-  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {
-    // The URL constructor is available in all browsers that support SW.
-    const publicUrl = new URL(
-      process.env.PUBLIC_URL,
-      window.location.href
-    );
-    if (publicUrl.origin !== window.location.origin) {
-      // Our service worker won't work if PUBLIC_URL is on a different origin
-      // from what our page is served on. This might happen if a CDN is used to
-      // serve assets; see https://github.com/facebook/create-react-app/issues/2374
-      return;
-    }
-
-    window.addEventListener('load', () => {
-      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;
-
-      if (isLocalhost) {
-        // This is running on localhost. Let's check if a service worker still exists or not.
-        checkValidServiceWorker(swUrl, config);
-
-        // Add some additional logging to localhost, pointing developers to the
-        // service worker/PWA documentation.
-        navigator.serviceWorker.ready.then(() => {
-          console.log(
-            'This web app is being served cache-first by a service ' +
-              'worker. To learn more, visit https://bit.ly/CRA-PWA'
-          );
-        });
-      } else {
-        // Is not localhost. Just register service worker
-        registerValidSW(swUrl, config);
-      }
-    });
-  }
-}
-
-function registerValidSW(swUrl: string, config?: Config) {
-  navigator.serviceWorker
-    .register(swUrl)
-    .then(registration => {
-      registration.onupdatefound = () => {
-        const installingWorker = registration.installing;
-        if (installingWorker == null) {
-          return;
-        }
-        installingWorker.onstatechange = () => {
-          if (installingWorker.state === 'installed') {
-            if (navigator.serviceWorker.controller) {
-              // At this point, the updated precached content has been fetched,
-              // but the previous service worker will still serve the older
-              // content until all client tabs are closed.
-              console.log(
-                'New content is available and will be used when all ' +
-                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'
-              );
-
-              // Execute callback
-              if (config && config.onUpdate) {
-                config.onUpdate(registration);
-              }
-            } else {
-              // At this point, everything has been precached.
-              // It's the perfect time to display a
-              // "Content is cached for offline use." message.
-              console.log('Content is cached for offline use.');
-
-              // Execute callback
-              if (config && config.onSuccess) {
-                config.onSuccess(registration);
-              }
-            }
-          }
-        };
-      };
-    })
-    .catch(error => {
-      console.error('Error during service worker registration:', error);
-    });
-}
-
-function checkValidServiceWorker(swUrl: string, config?: Config) {
-  // Check if the service worker can be found. If it can't reload the page.
-  fetch(swUrl, {
-    headers: { 'Service-Worker': 'script' }
-  })
-    .then(response => {
-      // Ensure service worker exists, and that we really are getting a JS file.
-      const contentType = response.headers.get('content-type');
-      if (
-        response.status === 404 ||
-        (contentType != null && contentType.indexOf('javascript') === -1)
-      ) {
-        // No service worker found. Probably a different app. Reload the page.
-        navigator.serviceWorker.ready.then(registration => {
-          registration.unregister().then(() => {
-            window.location.reload();
-          });
-        });
-      } else {
-        // Service worker found. Proceed as normal.
-        registerValidSW(swUrl, config);
-      }
-    })
-    .catch(() => {
-      console.log(
-        'No internet connection found. App is running in offline mode.'
-      );
-    });
-}
-
-export function unregister() {
-  if ('serviceWorker' in navigator) {
-    navigator.serviceWorker.ready
-      .then(registration => {
-        registration.unregister();
-      })
-      .catch(error => {
-        console.error(error.message);
-      });
-  }
-}
Index: frontend/src/App.css
===================================================================
diff --git a/frontend/src/App.css b/frontend/src/App.css
deleted file mode 100644
--- a/frontend/src/App.css	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
+++ /dev/null	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
@@ -1,38 +0,0 @@
-.App {
-  text-align: center;
-}
-
-.App-logo {
-  height: 40vmin;
-  pointer-events: none;
-}
-
-@media (prefers-reduced-motion: no-preference) {
-  .App-logo {
-    animation: App-logo-spin infinite 20s linear;
-  }
-}
-
-.App-header {
-  background-color: #282c34;
-  min-height: 100vh;
-  display: flex;
-  flex-direction: column;
-  align-items: center;
-  justify-content: center;
-  font-size: calc(10px + 2vmin);
-  color: white;
-}
-
-.App-link {
-  color: #61dafb;
-}
-
-@keyframes App-logo-spin {
-  from {
-    transform: rotate(0deg);
-  }
-  to {
-    transform: rotate(360deg);
-  }
-}
Index: frontend/src/setupProxy.js
===================================================================
diff --git a/frontend/src/setupProxy.js b/frontend/src/setupProxy.js
deleted file mode 100644
--- a/frontend/src/setupProxy.js	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
+++ /dev/null	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
@@ -1,11 +0,0 @@
-const { createProxyMiddleware } = require("http-proxy-middleware");
-
-module.exports = function(app) {
-  app.use(
-    "/api",
-    createProxyMiddleware({
-      target: "http://backend:8080",
-      pathRewrite: { "^/api": "" }
-    })
-  );
-};
Index: frontend/src/App.test.tsx
===================================================================
diff --git a/frontend/src/App.test.tsx b/frontend/src/App.test.tsx
deleted file mode 100644
--- a/frontend/src/App.test.tsx	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
+++ /dev/null	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
@@ -1,9 +0,0 @@
-import React from 'react';
-import { render } from '@testing-library/react';
-import App from './App';
-
-test('renders learn react link', () => {
-  const { getByText } = render(<App />);
-  const linkElement = getByText(/learn react/i);
-  expect(linkElement).toBeInTheDocument();
-});
Index: frontend/src/components/DatePicker.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/DatePicker.tsx b/frontend/src/components/DatePicker.tsx
new file mode 100644
--- /dev/null	(date 1701015458799)
+++ b/frontend/src/components/DatePicker.tsx	(date 1701015458799)
@@ -0,0 +1,35 @@
+import React from 'react';
+import { Form, Row, Col } from 'react-bootstrap';
+import DatePicker from 'react-datepicker';
+import 'react-datepicker/dist/react-datepicker.css';
+import { registerLocale, setDefaultLocale } from 'react-datepicker';
+import da from 'date-fns/locale/da';
+
+interface DateInputProps {
+    label: string;
+    selectedDate: Date | null;
+    onDateChange: (date: Date | null) => void;
+}
+
+export default function DateInput ({ label, selectedDate, onDateChange }: DateInputProps) {
+
+    registerLocale('da', da);
+    setDefaultLocale('da');
+
+    return (
+        <Form.Group as={Row}>
+            <Form.Label column sm={2}>
+                {label}
+            </Form.Label>
+            <Col sm={10}>
+                <DatePicker
+                    selected={selectedDate}
+                    onChange={(date: Date) => onDateChange(date)}
+                    dateFormat="MM/dd/yyyy"
+                    isClearable
+                    locale="da" // Set the locale for the date picker
+                />
+            </Col>
+        </Form.Group>
+    );
+}
\ No newline at end of file
Index: frontend/src/App.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/App.tsx\nimport React from 'react';\nimport {BrowserRouter as Router, Route, Switch, useLocation} from 'react-router-dom';\nimport MainPage from './MainPage';\nimport LoginPage from \"./Login\";\nimport CreateReportPage from \"./CreateReportPage\";\nimport NavigationBar from './NavigationBar';\n\nconst App: React.FC = () => {\n    return (\n        <Router>\n            <AppContent />\n        </Router>\n    );\n};\n\nconst AppContent: React.FC = () => {\n    const location = useLocation();\n\n    // Check if the current route is the login page\n    const isLoginPage = location.pathname === '/login';\n\n    return (\n        <>\n            {!isLoginPage && <NavigationBar />} {/* Render NavigationBar for all pages except the login page */}\n            <Switch>\n                <Route path=\"/login\" component={LoginPage} />\n                <Route path=\"/dashboard\" component={MainPage} />\n                <Route path=\"/create-report\" component={CreateReportPage} />\n                {/* Add other routes as needed */}\n            </Switch>\n        </>\n    );\n};\n\nexport default App;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/App.tsx b/frontend/src/App.tsx
--- a/frontend/src/App.tsx	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
+++ b/frontend/src/App.tsx	(date 1701944192575)
@@ -5,6 +5,10 @@
 import LoginPage from "./Login";
 import CreateReportPage from "./CreateReportPage";
 import NavigationBar from './NavigationBar';
+import LoginForm from "./components/LoginForm";
+import MyForm from "./components/ReportFormFull";
+import TopNavigationBar from "./components/NavigationBar";
+import ReportFormFull from "./components/ReportFormFull";
 
 const App: React.FC = () => {
     return (
@@ -22,11 +26,11 @@
 
     return (
         <>
-            {!isLoginPage && <NavigationBar />} {/* Render NavigationBar for all pages except the login page */}
+            {!isLoginPage && <TopNavigationBar />} {/* Render NavigationBar for all pages except the login page */}
             <Switch>
-                <Route path="/login" component={LoginPage} />
+                <Route path="/login" component={LoginForm} />
                 <Route path="/dashboard" component={MainPage} />
-                <Route path="/create-report" component={CreateReportPage} />
+                <Route path="/create-report" component={ReportFormFull} />
                 {/* Add other routes as needed */}
             </Switch>
         </>
Index: frontend/src/components/MyComponent.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/MyComponent.tsx b/frontend/src/components/MyComponent.tsx
new file mode 100644
--- /dev/null	(date 1700859329313)
+++ b/frontend/src/components/MyComponent.tsx	(date 1700859329313)
@@ -0,0 +1,25 @@
+import React from 'react';
+import Button from 'react-bootstrap/Button';
+
+interface Props {
+    name: string;
+    age: number;
+    onClick: () => void;
+}
+const MyComponent: React.FC<Props> = ({ name, age, onClick }) => {
+    return (
+        <div>
+            <h1>{name}</h1>
+            <p>Age: {age}</p>
+            <Button variant="primary" onClick={onClick}>Click me!</Button>{' '}
+        </div>
+    );
+};
+
+MyComponent.defaultProps = {
+    name: 'John',
+    age: 25,
+    onClick: () => {console.log("click!")},
+};
+
+export default MyComponent;
\ No newline at end of file
Index: frontend/public/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta\n      name=\"description\"\n      content=\"Web site created using create-react-app\"\n    />\n    <link rel=\"apple-touch-icon\" href=\"%PUBLIC_URL%/logo192.png\" />\n    <!--\n      manifest.json provides metadata used when your web app is installed on a\n      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/\n    -->\n    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n    <!--\n      Notice the use of %PUBLIC_URL% in the tags above.\n      It will be replaced with the URL of the `public` folder during the build.\n      Only files inside the `public` folder can be referenced from the HTML.\n\n      Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will\n      work correctly both with client-side routing and a non-root public URL.\n      Learn how to configure a non-root public URL by running `npm run build`.\n    -->\n    <title>React App</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n    <!--\n      This HTML file is a template.\n      If you open it directly in the browser, you will see an empty page.\n\n      You can add webfonts, meta tags, or analytics to this file.\n      The build step will place the bundled scripts into the <body> tag.\n\n      To begin the development, run `npm start` or `yarn start`.\n      To create a production bundle, use `npm run build` or `yarn build`.\n    -->\n  </body>\n</html>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/public/index.html b/frontend/public/index.html
--- a/frontend/public/index.html	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
+++ b/frontend/public/index.html	(date 1700820532501)
@@ -2,14 +2,13 @@
 <html lang="en">
   <head>
     <meta charset="utf-8" />
-    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
+    <link rel="icon" href="%PUBLIC_URL%/favicon.png" />
     <meta name="viewport" content="width=device-width, initial-scale=1" />
     <meta name="theme-color" content="#000000" />
     <meta
-      name="description"
-      content="Web site created using create-react-app"
+      name="Tutor Report"
+      content="Web site for Code-lab Tutors and Administrators"
     />
-    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
     <!--
       manifest.json provides metadata used when your web app is installed on a
       user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
@@ -24,7 +23,7 @@
       work correctly both with client-side routing and a non-root public URL.
       Learn how to configure a non-root public URL by running `npm run build`.
     -->
-    <title>React App</title>
+    <title>Tutor Report</title>
   </head>
   <body>
     <noscript>You need to enable JavaScript to run this app.</noscript>
Index: frontend/src/components/Message.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/Message.tsx b/frontend/src/components/Message.tsx
new file mode 100644
--- /dev/null	(date 1701886253136)
+++ b/frontend/src/components/Message.tsx	(date 1701886253136)
@@ -0,0 +1,7 @@
+import React from "react";
+
+function Greeting(){
+    return <h2>Hello there..</h2>
+}
+
+export default Greeting;
\ No newline at end of file
Index: frontend/src/components/LoginForm.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/LoginForm.tsx b/frontend/src/components/LoginForm.tsx
new file mode 100644
--- /dev/null	(date 1701888053412)
+++ b/frontend/src/components/LoginForm.tsx	(date 1701888053412)
@@ -0,0 +1,92 @@
+import Button from 'react-bootstrap/Button';
+import Form from 'react-bootstrap/Form';
+import {Stack} from "react-bootstrap";
+import React, {useState} from 'react';
+import {useHistory} from "react-router-dom";
+
+function LoginForm() {
+
+    const [email, setEmail] = useState<string>('');
+    const [password, setPassword] = useState<string>('');
+    const history = useHistory();
+
+    const url = 'http://localhost:8080/auth/login';
+    const endpoint = 'api/auth/login';
+    const handleLogin = async () => {
+        try {
+            const response = await fetch(url, {
+                method: 'POST',
+                headers: {
+                    'Content-Type': 'application/json',
+                },
+                body: JSON.stringify({ email, password }),
+            });
+
+            console.log(email);
+            console.log(password);
+
+            if (response.ok) {
+                const data = await response.json();
+                const token = data.token;
+                const email = data.email;
+                const roles = data.roles;
+
+                // Store the token in localStorage
+                localStorage.setItem('email', email);
+                localStorage.setItem('token', token);
+                localStorage.setItem('roles', roles);
+
+                // Redirect to the main page
+                history.push('/dashboard');
+            } else {
+                // Handle login failure
+                console.error('Login failed');
+            }
+        } catch (error) {
+            console.error('Error during login:', error);
+        }
+    };
+
+
+
+    return (
+        <Stack gap={2} className="col-md-5 mx-auto m-5">
+            <Form>
+                <h1>Login</h1>
+                <Form.Group className="mb-3 w-75" controlId="formBasicEmail">
+                    <Form.Label>Email address</Form.Label>
+                    <Form.Control
+                        type="email"
+                        placeholder="Enter email"
+                        onChange={(e) => setEmail(e.target.value)}
+                    />
+                    <Form.Text className="text-muted">
+                        We'll never share your email with anyone else.
+                    </Form.Text>
+                </Form.Group>
+
+                <Form.Group className="mb-3 w-75" controlId="formBasicPassword">
+                    <Form.Label>Password</Form.Label>
+                    <Form.Control
+                        type="password"
+                        placeholder="Password"
+                        onChange={(e) => setPassword(e.target.value)}
+
+                    />
+                </Form.Group>
+                <Form.Group className="mb-3 w-75" controlId="formBasicCheckbox">
+                    <Form.Check type="checkbox" label="Check me out" />
+                </Form.Group>
+                <Button
+                    variant="primary"
+                    type="button"
+                    onClick={handleLogin}
+                >
+                    Submit
+                </Button>
+            </Form>
+        </Stack>
+    );
+}
+
+export default LoginForm;
\ No newline at end of file
Index: frontend/src/components/Dropdown.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/Dropdown.tsx b/frontend/src/components/Dropdown.tsx
new file mode 100644
--- /dev/null	(date 1701948285107)
+++ b/frontend/src/components/Dropdown.tsx	(date 1701948285107)
@@ -0,0 +1,41 @@
+import {Col, Dropdown, Form, Row} from "react-bootstrap";
+import React from "react";
+
+
+interface Props {
+    label: string;
+    options: string[];
+    selectedOption: String | null;
+    event: (eventKey: string | null) => void;
+}
+
+export default function MyDropdown({label, options, selectedOption, event}: Props){
+    return (
+        <Form.Group as={Row} className="mb-3">
+            <Form.Label column sm={2}>
+                {label}
+            </Form.Label>
+            <Col sm={10}>
+                <Dropdown onSelect={event}>
+                    <Dropdown.Toggle variant="success" id="dropdown-basic">
+                        {selectedOption || '_'}
+                    </Dropdown.Toggle>
+                    <Dropdown.Menu>
+                        {mapper(options)}
+                    </Dropdown.Menu>
+                </Dropdown>
+            </Col>
+        </Form.Group>
+    )
+}
+
+function mapper(list: string[]) {
+    if (list.length === 0){
+        return <p>no items in list..</p>
+    }
+    return list.map(option =>
+        (
+            <Dropdown.Item eventKey={option}>{option}</Dropdown.Item>
+        )
+    )
+}
\ No newline at end of file
Index: frontend/public/manifest.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"short_name\": \"React App\",\n  \"name\": \"Create React App Sample\",\n  \"icons\": [\n    {\n      \"src\": \"favicon.ico\",\n      \"sizes\": \"64x64 32x32 24x24 16x16\",\n      \"type\": \"image/x-icon\"\n    },\n    {\n      \"src\": \"logo192.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"192x192\"\n    },\n    {\n      \"src\": \"logo512.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"512x512\"\n    }\n  ],\n  \"start_url\": \".\",\n  \"display\": \"standalone\",\n  \"theme_color\": \"#000000\",\n  \"background_color\": \"#ffffff\"\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/public/manifest.json b/frontend/public/manifest.json
--- a/frontend/public/manifest.json	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
+++ b/frontend/public/manifest.json	(date 1700819766042)
@@ -2,21 +2,7 @@
   "short_name": "React App",
   "name": "Create React App Sample",
   "icons": [
-    {
-      "src": "favicon.ico",
-      "sizes": "64x64 32x32 24x24 16x16",
-      "type": "image/x-icon"
-    },
-    {
-      "src": "logo192.png",
-      "type": "image/png",
-      "sizes": "192x192"
-    },
-    {
-      "src": "logo512.png",
-      "type": "image/png",
-      "sizes": "512x512"
-    }
+
   ],
   "start_url": ".",
   "display": "standalone",
Index: frontend/src/components/ReportList.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/ReportList.tsx b/frontend/src/components/ReportList.tsx
new file mode 100644
--- /dev/null	(date 1701886253157)
+++ b/frontend/src/components/ReportList.tsx	(date 1701886253157)
@@ -0,0 +1,86 @@
+import {ListGroup} from "react-bootstrap";
+import {MouseEvent} from "react";
+import React from "react";
+
+interface ListProperties{
+    reports: report[],
+    heading: string
+}
+type report = {name: string, age: number};
+
+
+function ReportList({reports, heading}: ListProperties){
+
+    return (
+        <>
+            <h1>{heading}</h1>
+            {mapper(reports)}
+        </>
+    )
+}
+
+
+function emptyList(list: report[]){
+    //return list.length === 0 && <p>no items in list..</p>;
+    if (list.length === 0){
+        return <p>no items in list..</p>
+    }
+    return null;
+}
+
+function mapper(list: report[]) {
+    if (list.length === 0){
+        return <p>no items in list..</p>
+    }
+    return list.map(item =>
+        (
+            <ListGroup
+                key={item.age}
+            >
+                <ListGroup.Item
+                    action variant="success"
+                    onClick={event => console.log(item)}
+                >
+                    <p>name:</p>
+                    {item.name}
+                    <br/>
+                    <p>age:</p>
+                    {item.age}
+                </ListGroup.Item>
+            </ListGroup>
+        )
+    )
+}
+
+function mapper2(list: report[]) {
+    return list.map(item =>
+        (
+            <ul
+                className="list-group"
+                key={item.age}
+            >
+                <li
+                    className="list-group-item"
+                    //onClick={event => printMouseClick(event, item)}
+                    onClick={handleClick}
+                >
+                        <p>name:</p>
+                        {item.name}
+                        <br/>
+                        <p>age:</p>
+                        {item.age}
+                </li>
+            </ul>
+        )
+    )
+}
+
+function printMouseClick(event: MouseEvent, toPrint: any){
+    console.log("x:" + event.clientX);
+    console.log("y:" + event.clientY);
+    console.log(toPrint);
+}
+
+const handleClick = (event: MouseEvent) => console.log(event);
+
+export default ReportList;
\ No newline at end of file
Index: frontend/src/components/ReportFormFull.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/ReportFormFull.tsx b/frontend/src/components/ReportFormFull.tsx
new file mode 100644
--- /dev/null	(date 1701949566347)
+++ b/frontend/src/components/ReportFormFull.tsx	(date 1701949566347)
@@ -0,0 +1,155 @@
+import React, { useState } from 'react';
+import { Form, Row, Col, Container } from 'react-bootstrap';
+import DateInput from "./DatePicker";
+import MyDropdown from "./Dropdown";
+import {format} from "date-fns";
+import Button from "react-bootstrap/Button";
+
+// Register the Danish locale
+
+
+// Create the MyForm component
+const MyForm: React.FC = () => {
+
+
+    // useState is a hook, and returns an array.
+    // first thing in the array is the current state, the second is the function that updates the state.
+    const [selectedDate, setSelectedDate] = useState<Date | null>(null);
+
+    const [problem, setProblem] = useState<string>('');
+    const [solution, setSolution] = useState<string>('');
+    const [duration, setDuration] = useState<string | null>(null);
+    const [semester, setSemester] = useState<string | null>(null);
+    const [courseClassName, setCourseClassName] = useState<string | null>(null);
+
+    const handleDateChange = (date: Date | null) => {
+        setSelectedDate(date);
+    };
+
+    const handleSemesterChange = (eventKey: string | null) => {
+        setSemester(eventKey);
+    }; const handleDurationChange = (eventKey: string | null) => {
+        setDuration(eventKey);
+    }; const handleCourseNameChange = (eventKey: string | null) => {
+        setCourseClassName(eventKey);
+    };
+
+    const handleProblemChange = (event: React.ChangeEvent<HTMLInputElement>) => {
+        setProblem(event.target.value);
+    };
+
+
+    const handleSolutionChange = (event: React.ChangeEvent<HTMLInputElement>) => {
+        setSolution(event.target.value);
+    };
+
+    const handleSubmit = async (event: React.FormEvent) => {
+        event.preventDefault();
+        const endpoint: string = 'http://localhost:8080/reports/add/' + localStorage.getItem("email");
+        console.log(endpoint);
+
+        const date = selectedDate ? format(selectedDate, 'yyyy-MM-dd') : '';
+
+        const reportRequest = createRequest(
+            'POST',
+            {problem, solution, duration, semester, courseClassName, date}
+        )
+
+        try {
+            const response = await fetch(endpoint, {
+                method: 'POST',
+                headers: {
+                    'Authorization': 'Bearer ' + localStorage.getItem("token"),
+                    'Content-Type': 'application/json',
+                },
+                body: JSON.stringify({problem, solution, duration, semester, courseClassName, date}),
+            });
+            console.log(reportRequest.body);
+
+            if (response.ok) {
+                const data = await response.json();
+                console.log(data);
+                console.log('It updated, so i dont have to redeploy each time!!');
+
+
+            } else {
+                // Handle login failure
+                console.error('Report failed');
+            }
+        } catch (error) {
+            console.error('Error during report creation:', error);
+        }
+    };
+
+
+    return (
+        <Container className="mt-5">
+            <Form style={{ maxWidth: '600px', margin: 'auto', padding: '20px', border: '2px solid black' }}>
+                {/* First input: Date picker */}
+                <DateInput label="Dato" selectedDate={selectedDate} onDateChange={handleDateChange} />
+
+                {/* Second input: Dropdown menu */}
+                <MyDropdown label={'Semester'} options={['FIRST', 'SECOND', 'THIRD']} selectedOption={semester} event={handleSemesterChange}/>
+                <MyDropdown label={'Tid brugt'} options={['TEN_MIN', "HALF_HOUR"]} selectedOption={duration} event={handleDurationChange}/>
+                <MyDropdown label={'Klasse'} options={['Dat21a', "Dat21b"]} selectedOption={courseClassName} event={handleCourseNameChange}/>
+
+
+                {/* Third input: Text input */}
+                <Form.Group as={Row} className="mb-3">
+                    <Form.Label column sm={2}>
+                        Text Input
+                    </Form.Label>
+                    <Col sm={10}>
+                        <Form.Control
+                            as="textarea"
+                            rows={4}
+                            type="text"
+                            placeholder="Hvad var spørgsmålet eller problemmet?"
+                            value={problem}
+                            onChange={handleProblemChange}
+                        />
+                    </Col>
+                </Form.Group>
+                <Form.Group as={Row} className="mb-3">
+                    <Form.Label column sm={2}>
+                        Text Input
+                    </Form.Label>
+                    <Col sm={10}>
+                        <Form.Control
+                            as="textarea"
+                            rows={4}
+                            type="text"
+                            placeholder="Hvad var svaret eller løsningen?"
+                            value={solution}
+                            onChange={handleSolutionChange}
+                        />
+                    </Col>
+                </Form.Group>
+                <Button
+                    variant="primary"
+                    type="button"
+                    onClick={handleSubmit}
+                >
+                    Submit
+                </Button>
+            </Form>
+        </Container>
+    );
+};
+
+function createRequest(method: string, bodyValues: any): RequestInit{
+    return  {
+        method: method,
+        headers: {
+            "Accept": "application/json",
+            "Accept-Encoding": "gzip, deflate, br",
+            'Authorization': 'Bearer ' + localStorage.getItem("token"),
+            'Connection': 'keep-alive',
+            'Content-Type': 'application/json'
+        },
+        body: JSON.stringify(bodyValues)
+    }
+}
+
+
+export default MyForm;
Index: frontend/src/components/ReportForm.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/ReportForm.tsx b/frontend/src/components/ReportForm.tsx
new file mode 100644
--- /dev/null	(date 1701886253160)
+++ b/frontend/src/components/ReportForm.tsx	(date 1701886253160)
@@ -0,0 +1,19 @@
+import React from 'react';
+import Form from 'react-bootstrap/Form';
+
+function ReportForm() {
+    return (
+        <Form>
+            <Form.Group className="mb-3 w-75 m-3" controlId="exampleForm.ControlInput1">
+                <Form.Label>Email address</Form.Label>
+                <Form.Control type="email" placeholder="name@example.com" />
+            </Form.Group>
+            <Form.Group className="mb-3" controlId="exampleForm.ControlTextarea1">
+                <Form.Label>Example textarea</Form.Label>
+                <Form.Control as="textarea" rows={3} />
+            </Form.Group>
+        </Form>
+    );
+}
+
+export default ReportForm;
\ No newline at end of file
Index: frontend/src/components/NavigationBar.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/NavigationBar.tsx b/frontend/src/components/NavigationBar.tsx
new file mode 100644
--- /dev/null	(date 1701888656788)
+++ b/frontend/src/components/NavigationBar.tsx	(date 1701888656788)
@@ -0,0 +1,49 @@
+import React from 'react';
+import Container from 'react-bootstrap/Container';
+import Navbar from 'react-bootstrap/Navbar';
+import {Redirect, useHistory} from "react-router-dom";
+import {NavbarText} from "react-bootstrap";
+import Button from "react-bootstrap/Button";
+
+function TopNavigationBar() {
+
+    const history = useHistory();
+    const handleLogout = () => {
+        // Clear the authentication token from localStorage
+        localStorage.removeItem('email');
+        localStorage.removeItem('token');
+        localStorage.removeItem('roles');
+
+        // Redirect to the login page
+        history.push('/login');
+    };
+
+// Check if the user is authenticated (has a token)
+    const isAuthenticated = localStorage.getItem('token');
+
+    if (!isAuthenticated) {
+        // Redirect to the login page if not authenticated
+        return <Redirect to="/login" />;
+    }
+
+    let email: string|null = localStorage.getItem('email') || '';
+
+
+    const themeColor = "dark";
+    return (
+        <Navbar bg="dark" data-bs-theme={themeColor}>
+            <Container>
+                <Navbar.Brand href="/dashboard">Tutor Report</Navbar.Brand>
+                <Navbar.Brand href="/dashboard">Home</Navbar.Brand>
+                <Navbar.Brand href="/create-report">Write report</Navbar.Brand>
+                <Navbar.Toggle />
+                <Navbar.Collapse className="justify-content-end">
+                    <NavbarText className="me-3">{email}</NavbarText>
+                    <Button type="button" className="btn btn-danger" onClick={handleLogout} >Logout</Button>
+                </Navbar.Collapse>
+            </Container>
+        </Navbar>
+    );
+}
+
+export default TopNavigationBar;
\ No newline at end of file
Index: frontend/src/MainPage.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/components/MainPage.tsx\nimport React from 'react';\nimport { Redirect, useHistory } from 'react-router-dom';\nimport NavigationBar from './NavigationBar';\nimport CreateReportPage from './CreateReportPage';\n\nconst MainPage: React.FC = () => {\n    const history = useHistory();\n\n    const handleLogout = () => {\n        // Clear the authentication token from localStorage\n        localStorage.removeItem('token');\n\n        // Redirect to the login page\n        history.push('/login');\n    };\n\n    // Check if the user is authenticated (has a token)\n    const isAuthenticated = localStorage.getItem('token');\n\n    if (!isAuthenticated) {\n        // Redirect to the login page if not authenticated\n        return <Redirect to=\"/login\" />;\n    }\n\n    let email: string|null = localStorage.getItem('email') || '';\n\n    // Display the main page content\n    return (\n        <div className=\"container mt-5\">\n            <h2>Main Page - Dashboard</h2>\n            {/* Your dashboard components go here */}\n        </div>\n    );\n};\n\nexport default MainPage;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/MainPage.tsx b/frontend/src/MainPage.tsx
--- a/frontend/src/MainPage.tsx	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
+++ b/frontend/src/MainPage.tsx	(date 1701886671377)
@@ -1,8 +1,6 @@
 // src/components/MainPage.tsx
 import React from 'react';
 import { Redirect, useHistory } from 'react-router-dom';
-import NavigationBar from './NavigationBar';
-import CreateReportPage from './CreateReportPage';
 
 const MainPage: React.FC = () => {
     const history = useHistory();
@@ -12,7 +10,7 @@
         localStorage.removeItem('token');
 
         // Redirect to the login page
-        history.push('/login');
+        history.push('/');
     };
 
     // Check if the user is authenticated (has a token)
@@ -20,7 +18,7 @@
 
     if (!isAuthenticated) {
         // Redirect to the login page if not authenticated
-        return <Redirect to="/login" />;
+        return <Redirect to="/" />;
     }
 
     let email: string|null = localStorage.getItem('email') || '';
Index: frontend/src/Login.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/components/LoginPage.tsx\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst LoginPage: React.FC = () => {\n    const [email, setEmail] = useState<string>('');\n    const [password, setPassword] = useState<string>('');\n    const history = useHistory();\n\n    const handleLogin = async () => {\n        try {\n            const response = await fetch('api/auth/login', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ email, password }),\n            });\n\n            if (response.ok) {\n                const data = await response.json();\n                const token = data.token;\n                const email = data.email;\n                const roles = data.roles;\n\n                // Store the token in localStorage\n                localStorage.setItem('email', email);\n                localStorage.setItem('token', token);\n                localStorage.setItem('roles', roles);\n\n                // Redirect to the main page\n                history.push('/dashboard');\n            } else {\n                // Handle login failure\n                console.error('Login failed');\n            }\n        } catch (error) {\n            console.error('Error during login:', error);\n        }\n    };\n\n    return (\n        <div className=\"container mt-5\">\n            <h2>Login Page</h2>\n            <form>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"email\" className=\"form-label\">Email:</label>\n                    <input\n                        type=\"email\"\n                        className=\"form-control\"\n                        id=\"email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"password\" className=\"form-label\">Password:</label>\n                    <input\n                        type=\"password\"\n                        className=\"form-control\"\n                        id=\"password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                </div>\n                <button type=\"button\" className=\"btn btn-primary\" onClick={handleLogin}>\n                    Login\n                </button>\n            </form>\n        </div>\n    );\n};\n\nexport default LoginPage;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/Login.tsx b/frontend/src/Login.tsx
--- a/frontend/src/Login.tsx	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
+++ b/frontend/src/Login.tsx	(date 1701887303127)
@@ -43,7 +43,7 @@
         <div className="container mt-5">
             <h2>Login Page</h2>
             <form>
-                <div className="mb-3">
+                <div className="mb-3 w-75">
                     <label htmlFor="email" className="form-label">Email:</label>
                     <input
                         type="email"
@@ -53,7 +53,7 @@
                         onChange={(e) => setEmail(e.target.value)}
                     />
                 </div>
-                <div className="mb-3">
+                <div className="mb-3 w-75">
                     <label htmlFor="password" className="form-label">Password:</label>
                     <input
                         type="password"
Index: backend/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect\nspring.jpa.hibernate.ddl-auto=none\nspring.jpa.hibernate.show-sql=true\n\nspring.jpa.defer-datasource-initialization=true\n\n#spring.datasource.url = jdbc:mysql://docker-mysql:3307/TestDB?allowPublicKeyRetrieval=true\nspring.datasource.url = jdbc:mysql://localhost:3306/tutorreportdb?allowPublicKeyRetrieval=true\nspring.datasource.password = Password1234\nspring.datasource.username=root\n\n#spring.datasource.url=jdbc:mysql://${MYSQL_HOST:db}:3306/tutorreportdb\n#spring.datasource.password=${MYSQL_PASSWORD:Password1234}\n\nspring.datasource.initialize=true\n\nspring.jpa.open-in-view=false\n\nspring.sql.init.mode=always\nspring.sql.init.schema-locations=classpath:/schema.sql\nspring.sql.init.data-locations=classpath:/data.sql\nspring.sql.init.continue-on-error=true\n\nspring.data.rest.base-path=/api\nspring.jpa.properties.hibernate.enable_lazy_load_no_trans=true\n\nserver.port=8080\napp.token-expiration = 1800\napp.token-issuer=self
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/backend/src/main/resources/application.properties b/backend/src/main/resources/application.properties
--- a/backend/src/main/resources/application.properties	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
+++ b/backend/src/main/resources/application.properties	(date 1701887922114)
@@ -6,7 +6,7 @@
 
 #spring.datasource.url = jdbc:mysql://docker-mysql:3307/TestDB?allowPublicKeyRetrieval=true
 spring.datasource.url = jdbc:mysql://localhost:3306/tutorreportdb?allowPublicKeyRetrieval=true
-spring.datasource.password = Password1234
+spring.datasource.password =Password1234
 spring.datasource.username=root
 
 #spring.datasource.url=jdbc:mysql://${MYSQL_HOST:db}:3306/tutorreportdb
Index: frontend/src/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\n\nconst root = ReactDOM.createRoot(\n    document.getElementById('root') as HTMLElement\n);\nroot.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/index.tsx b/frontend/src/index.tsx
--- a/frontend/src/index.tsx	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
+++ b/frontend/src/index.tsx	(date 1701885067710)
@@ -1,7 +1,6 @@
 import 'bootstrap/dist/css/bootstrap.min.css';
 import React from 'react';
 import ReactDOM from 'react-dom/client';
-import './index.css';
 import App from './App';
 
 
Index: frontend/src/CreateReportPage.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/components/CreateReportPage.tsx\nimport React, { useState } from 'react';\nimport DatePicker from 'react-datepicker';\nimport { format } from 'date-fns';\n\nconst CreateReportPage: React.FC = () => {\n\n    type reportRequest = {\n        problem: string;\n        solution: string;\n        duration: string;\n        semester: string;\n        courseClassName: string;\n        date: Date\n    };\n\n    const [problem, setProblem] = useState<string>('');\n    const [solution, setSolution] = useState<string>('');\n    const [duration, setDuration] = useState<string>('');\n    const [semester, setSemester] = useState<string>('');\n    const [courseClassName, setCourseClassName] = useState<string>('');\n    const [selectedDate, setSelectedDate] = useState<Date | null>(null);\n    const handleSubmit = async (event: React.FormEvent) => {\n        event.preventDefault();\n        const endpoint: string = 'api/reports/add/' + localStorage.getItem(\"email\");\n        console.log(endpoint);\n\n        const date = selectedDate ? format(selectedDate, 'yyyy-MM-dd') : '';\n\n        try {\n            const response = await fetch(endpoint, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({problem, solution, duration, semester, courseClassName, date}),\n            });\n            console.log(JSON.stringify({problem, solution, duration, semester, courseClassName, date}))\n\n            if (response.ok) {\n                const data = await response.json();\n                console.log(data);\n\n\n            } else {\n                // Handle login failure\n                console.error('Report failed');\n            }\n        } catch (error) {\n            console.error('Error during report creation:', error);\n        }\n    };\n\n\n\n    return (\n        <div className=\"container mt-5\">\n            <h2>Create Report</h2>\n            <form onSubmit={handleSubmit}>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"datePicker\" className=\"form-label\">Select Date:</label>\n                    <DatePicker\n                        id=\"datePicker\"\n                        className=\"form-control\"\n                        selected={selectedDate}\n                        onChange={(date: Date | null) => setSelectedDate(date)}\n                        dateFormat=\"dd/MM/yyyy\" // Adjust the date format as needed\n                    />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"problem\" className=\"form-label\">Problem:</label>\n                    <input\n                        type=\"text\"\n                        id=\"problem\"\n                        className=\"form-control\"\n                        value={problem}\n                        placeholder=\"What was the problem..\"\n                        onChange={(e) => setProblem(e.target.value)}\n                    />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"solution\" className=\"form-label\">Solution:</label>\n                    <input\n                        type=\"text\"\n                        id=\"solution\"\n                        className=\"form-control\"\n                        value={solution}\n                        placeholder=\"What was the solution..\"\n                        onChange={(e) => setSolution(e.target.value)}\n                    />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"duration\" className=\"form-label\">Duration:</label>\n                    <input\n                        type=\"text\"\n                        id=\"duration\"\n                        className=\"form-control\"\n                        value={duration}\n                        placeholder=\"How long did it take..\"\n                        onChange={(e) => setDuration(e.target.value)}\n                    />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"semester\" className=\"form-label\">Semester:</label>\n                    <input\n                        type=\"text\"\n                        id=\"semester\"\n                        className=\"form-control\"\n                        value={semester}\n                        placeholder=\"What was the semester..\"\n                        onChange={(e) => setSemester(e.target.value)}\n                    />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"courseClass\" className=\"form-label\">Class:</label>\n                    <input\n                        type=\"text\"\n                        id=\"courseClass\"\n                        className=\"form-control\"\n                        value={courseClassName}\n                        placeholder=\"What was the courseClass..\"\n                        onChange={(e) => setCourseClassName(e.target.value)}\n                    />\n                </div>\n                <div>\n                    <button type=\"submit\" className=\"btn btn-primary\" onClick={handleSubmit}>add report</button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default CreateReportPage;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/CreateReportPage.tsx b/frontend/src/CreateReportPage.tsx
--- a/frontend/src/CreateReportPage.tsx	(revision fd1a6862ba60318d5c54a35278070f66b6c50869)
+++ b/frontend/src/CreateReportPage.tsx	(date 1701877386152)
@@ -5,14 +5,18 @@
 
 const CreateReportPage: React.FC = () => {
 
-    type reportRequest = {
-        problem: string;
-        solution: string;
-        duration: string;
-        semester: string;
-        courseClassName: string;
-        date: Date
-    };
+    function createRequest(method: string, bodyValues: any): RequestInit{
+        return  {
+            method: method,
+            headers: {
+                'Content-Type': 'application/json',
+                'Authorization': 'Bearer ' + localStorage.getItem("token")
+            },
+            body: JSON.stringify(bodyValues)
+        }
+    }
+
+
 
     const [problem, setProblem] = useState<string>('');
     const [solution, setSolution] = useState<string>('');
@@ -20,6 +24,9 @@
     const [semester, setSemester] = useState<string>('');
     const [courseClassName, setCourseClassName] = useState<string>('');
     const [selectedDate, setSelectedDate] = useState<Date | null>(null);
+
+
+
     const handleSubmit = async (event: React.FormEvent) => {
         event.preventDefault();
         const endpoint: string = 'api/reports/add/' + localStorage.getItem("email");
@@ -27,19 +34,19 @@
 
         const date = selectedDate ? format(selectedDate, 'yyyy-MM-dd') : '';
 
+        const reportRequest = createRequest(
+            'POST',
+            {problem, solution, duration, semester, courseClassName, date}
+        )
+
         try {
-            const response = await fetch(endpoint, {
-                method: 'POST',
-                headers: {
-                    'Content-Type': 'application/json',
-                },
-                body: JSON.stringify({problem, solution, duration, semester, courseClassName, date}),
-            });
+            const response = await fetch(endpoint, reportRequest);
             console.log(JSON.stringify({problem, solution, duration, semester, courseClassName, date}))
 
             if (response.ok) {
                 const data = await response.json();
                 console.log(data);
+                console.log('It updated, so i dont have to redeploy each time!!');
 
 
             } else {
